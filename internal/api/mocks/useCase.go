// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "merch-shop/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// BuyMerch provides a mock function with given fields: ctx, userID, itemName
func (_m *UseCase) BuyMerch(ctx context.Context, userID uint64, itemName string) error {
	ret := _m.Called(ctx, userID, itemName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) error); ok {
		r0 = rf(ctx, userID, itemName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckCredentials provides a mock function with given fields: ctx, creds
func (_m *UseCase) CheckCredentials(ctx context.Context, creds domain.Credentials) (uint64, error) {
	ret := _m.Called(ctx, creds)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, domain.Credentials) uint64); ok {
		r0 = rf(ctx, creds)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Credentials) error); ok {
		r1 = rf(ctx, creds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInfo provides a mock function with given fields: ctx, userID
func (_m *UseCase) GetInfo(ctx context.Context, userID uint64) (domain.Info, error) {
	ret := _m.Called(ctx, userID)

	var r0 domain.Info
	if rf, ok := ret.Get(0).(func(context.Context, uint64) domain.Info); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(domain.Info)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, creds
func (_m *UseCase) Login(ctx context.Context, creds domain.Credentials) (string, error) {
	ret := _m.Called(ctx, creds)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, domain.Credentials) string); ok {
		r0 = rf(ctx, creds)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Credentials) error); ok {
		r1 = rf(ctx, creds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCoin provides a mock function with given fields: ctx, fromUserID, req
func (_m *UseCase) SendCoin(ctx context.Context, fromUserID uint64, req domain.SendCoinRequest) error {
	ret := _m.Called(ctx, fromUserID, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, domain.SendCoinRequest) error); ok {
		r0 = rf(ctx, fromUserID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
